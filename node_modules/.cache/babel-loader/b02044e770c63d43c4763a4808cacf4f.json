{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"D:\\\\WebReact\\\\FundTest\\\\fundclient\\\\src\\\\components\\\\Uppload\\\\Uppload.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport './Uppload.css';\nimport { Upload, message, Button } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport XLSX from \"xlsx\";\nimport http from \"../http-common\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst props = {\n  accept: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  name: 'file',\n  headers: {\n    authorization: 'authorization-text'\n  },\n  showUploadList: true,\n\n  onChange(info) {\n    if (info.file.status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n\n    if (info.file.status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully`);\n    } else if (info.file.status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  },\n\n  beforeUpload: (file, fileList) => {\n    var rABS = true;\n    const f = fileList[0];\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      var data = e.target.result;\n      var workbook = XLSX.read(data, {\n        type: rABS ? 'binary' : 'array'\n      });\n      var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\n      var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, {\n        header: 1\n      });\n      let resultArray = [];\n      console.log(jsonArr);\n      console.log(jsonArr.length);\n      console.log(jsonArr[0].length);\n\n      for (let i = 1; i < jsonArr.length; i++) {\n        var objArray = [];\n\n        for (let j = 0; j < jsonArr[0].length; j++) {\n          var obj = new Object();\n          obj = {\n            key: jsonArr[0][j],\n            value: jsonArr[i][j]\n          };\n          objArray.push(obj);\n        }\n\n        resultArray.push(objArray);\n      }\n\n      console.log(resultArray);\n      http.post(\"/prejson\", resultArray);\n    };\n\n    if (rABS) reader.readAsBinaryString(f);else reader.readAsArrayBuffer(f);\n    return false;\n  }\n};\nconst state = {\n  finalArray: []\n};\n\nclass Uppload extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.fileInput = /*#__PURE__*/React.createRef();\n    this.handleArray = this.handleArray.bind(this);\n  }\n\n  handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) this.props.handleFile(files[0]);\n  }\n\n  handleArray(array) {\n    this.setState(array);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Upload, { ...props,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 23\n        }, this),\n        children: \"Click to Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        hidden: true,\n        accept: SheetJSFT,\n        ref: this.fileInput,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nconst SheetJSFT = [\"xlsx\", \"xlsm\", \"xls\", \"csv\"];\nexport default Uppload;","map":{"version":3,"sources":["D:/WebReact/FundTest/fundclient/src/components/Uppload/Uppload.js"],"names":["React","Upload","message","Button","UploadOutlined","XLSX","http","props","accept","name","headers","authorization","showUploadList","onChange","info","file","status","console","log","fileList","success","error","beforeUpload","rABS","f","reader","FileReader","onload","e","data","target","result","workbook","read","type","first_worksheet","Sheets","SheetNames","jsonArr","utils","sheet_to_json","header","resultArray","length","i","objArray","j","obj","Object","key","value","push","post","readAsBinaryString","readAsArrayBuffer","state","finalArray","Uppload","Component","constructor","handleChange","bind","fileInput","createRef","handleArray","files","handleFile","array","setState","render","SheetJSFT"],"mappings":"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","sourcesContent":["'use strict';\r\nimport React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './Uppload.css';\r\nimport { Upload, message, Button } from 'antd';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport XLSX from \"xlsx\";\r\nimport http from \"../http-common\";\r\n\r\n\r\n\r\n const props = {\r\n      accept: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n      name: 'file',\r\n      headers: {\r\n          authorization: 'authorization-text',\r\n      },\r\n     \r\n      showUploadList: true,\r\n      onChange(info) {\r\n        if (info.file.status !== 'uploading') {\r\n          console.log(info.file, info.fileList);\r\n        }\r\n        if (info.file.status === 'done') {\r\n          message.success(`${info.file.name} file uploaded successfully`);\r\n        } else if (info.file.status === 'error') {\r\n          message.error(`${info.file.name} file upload failed.`);\r\n        }\r\n      },\r\n      beforeUpload: (file, fileList) => {\r\n        \r\n        var rABS = true;\r\n        const f = fileList[0];\r\n        var reader = new FileReader();\r\n        reader.onload = function (e) {\r\n            var data = e.target.result;\r\n          \r\n            var workbook = XLSX.read(data, {\r\n                type: rABS ? 'binary' : 'array'\r\n            });\r\n            var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\r\n            var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, {header:1});\r\n          \r\n          let resultArray = [];\r\n            console.log(jsonArr);\r\n            console.log(jsonArr.length);\r\n            console.log(jsonArr[0].length);\r\n            for(let i=1;i<jsonArr.length;i++){\r\n            var  objArray = [];\r\n              for(let j=0;j<jsonArr[0].length;j++){\r\n                var obj = new Object;\r\n                      obj = {key:jsonArr[0][j] , value:jsonArr[i][j]};\r\n                      objArray.push(obj); \r\n              }\r\n              resultArray.push(objArray);  \r\n              \r\n            }\r\n            console.log(resultArray);\r\n            \r\n             http.post(\"/prejson\", resultArray);\r\n            \r\n        };\r\n        if (rABS) reader.readAsBinaryString(f); else reader.readAsArrayBuffer(f);\r\n        return false;\r\n      }\r\n     \r\n  };\r\n\r\n  const state = {\r\n      finalArray:[]\r\n  }\r\n\r\n  class Uppload extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.fileInput = React.createRef();\r\n      this.handleArray = this.handleArray.bind(this);\r\n      \r\n    }\r\n    handleChange(e) {\r\n      const files = e.target.files;\r\n      if (files && files[0]) this.props.handleFile(files[0]);\r\n    }\r\n    handleArray(array){\r\n      this.setState(array);\r\n\r\n    }\r\n\r\n  render() {\r\n    return (\r\n\r\n        <Upload {...props}>\r\n        <Button icon={<UploadOutlined /> }>Click to Upload</Button>\r\n        <input\r\n          type=\"file\"\r\n          hidden\r\n          accept={SheetJSFT}\r\n          ref={this.fileInput}\r\n          onChange={this.handleChange}\r\n         \r\n        />\r\n      </Upload>\r\n    )}\r\n\r\n}\r\n\r\nconst SheetJSFT = [\r\n  \"xlsx\",\r\n  \"xlsm\",\r\n  \"xls\",\r\n  \"csv\",\r\n  \r\n]\r\nexport default Uppload;"]},"metadata":{},"sourceType":"module"}