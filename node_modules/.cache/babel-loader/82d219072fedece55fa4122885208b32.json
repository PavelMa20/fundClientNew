{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"D:\\\\WebReact\\\\FundTest\\\\fundclient\\\\src\\\\components\\\\Uppload\\\\Uppload.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport './Uppload.css';\nimport { Upload, message, Button } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport XLSX from \"xlsx\";\nimport http from \"../http-common\"; // const props = {\n//   accept: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n//   name: 'file',\n//   headers: {\n//     authorization: 'authorization-text',\n//   },\n//   showUploadList: true,\n//   onChange(info) {\n//     if (info.file.status !== 'uploading') {\n//       console.log(info.file, info.fileList);\n//     }\n//     if (info.file.status === 'done') {\n//       message.success(`${info.file.name} file uploaded successfully`);\n//     } else if (info.file.status === 'error') {\n//       message.error(`${info.file.name} file upload failed.`);\n//     }\n//   },\n//   beforeUpload: (file, fileList) => {\n//     var rABS = true;\n//     const f = fileList[0];\n//     var reader = new FileReader();\n//     reader.onload = function (e) {\n//       var data = e.target.result;\n//       var workbook = XLSX.read(data, {\n//         type: rABS ? 'binary' : 'array'\n//       });\n//       var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\n//       var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, { header: 1 });\n//       let resultArray = [];\n//       console.log(jsonArr);\n//       console.log(jsonArr.length);\n//       console.log(jsonArr[0].length);\n//       for (let i = 1; i < jsonArr.length; i++) {\n//         var objArray = [];\n//         for (let j = 0; j < jsonArr[0].length; j++) {\n//           var obj = new Object;\n//           obj = { key: jsonArr[0][j], value: jsonArr[i][j] };\n//           objArray.push(obj);\n//         }\n//         resultArray.push(objArray);\n//       }\n//       console.log(resultArray);\n//       http.post(\"/prejson\", resultArray);\n//     };\n//     if (rABS) reader.readAsBinaryString(f); else reader.readAsArrayBuffer(f);\n//     return false;\n//   }\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Uppload extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.beforeUpload = (file, fileList) => {\n      var rABS = true;\n      const f = fileList[0];\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        var _this$props$onUpload, _this$props;\n\n        var data = e.target.result;\n        var workbook = XLSX.read(data, {\n          type: rABS ? 'binary' : 'array'\n        });\n        var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\n        var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, {\n          header: 1\n        });\n        let resultArray = [];\n        console.log(jsonArr);\n        console.log(jsonArr.length);\n        console.log(jsonArr[0].length);\n\n        for (let i = 1; i < jsonArr.length; i++) {\n          var objArray = [];\n\n          for (let j = 0; j < jsonArr[0].length; j++) {\n            var obj = new Object();\n            obj = {\n              key: jsonArr[0][j],\n              value: jsonArr[i][j]\n            };\n            objArray.push(obj);\n          }\n\n          resultArray.push(objArray);\n        }\n\n        console.log(resultArray);\n        (_this$props$onUpload = (_this$props = this.props).onUpload) === null || _this$props$onUpload === void 0 ? void 0 : _this$props$onUpload.call(_this$props, resultArray); // http.post(\"/prejson\", resultArray);\n      };\n\n      if (rABS) reader.readAsBinaryString(f);else reader.readAsArrayBuffer(f);\n      return false;\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.fileInput = /*#__PURE__*/React.createRef();\n  } // handleChange(e) {\n  //   const files = e.target.files;\n  //   if (files && files[0]) this.props.handleFile(files[0]);\n  // }\n\n\n  handleChange(info) {\n    if (info.file.status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n\n    if (info.file.status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully`);\n    } else if (info.file.status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Upload, {\n      accept: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      name: \"file\",\n      headers: {\n        authorization: 'authorization-text'\n      },\n      onChange: this.onChange,\n      beforeUpload: this.beforeUpload,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 23\n        }, this),\n        children: \"Click to Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst SheetJSFT = [\"xlsx\", \"xlsm\", \"xls\", \"csv\"];\nexport default Uppload;","map":{"version":3,"sources":["D:/WebReact/FundTest/fundclient/src/components/Uppload/Uppload.js"],"names":["React","Upload","message","Button","UploadOutlined","XLSX","http","Uppload","Component","constructor","props","beforeUpload","file","fileList","rABS","f","reader","FileReader","onload","e","data","target","result","workbook","read","type","first_worksheet","Sheets","SheetNames","jsonArr","utils","sheet_to_json","header","resultArray","console","log","length","i","objArray","j","obj","Object","key","value","push","onUpload","readAsBinaryString","readAsArrayBuffer","handleChange","bind","fileInput","createRef","info","status","success","name","error","render","authorization","onChange","SheetJSFT"],"mappings":"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","sourcesContent":["'use strict';\r\nimport React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './Uppload.css';\r\nimport { Upload, message, Button } from 'antd';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport XLSX from \"xlsx\";\r\nimport http from \"../http-common\";\r\n\r\n\r\n\r\n// const props = {\r\n//   accept: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n//   name: 'file',\r\n//   headers: {\r\n//     authorization: 'authorization-text',\r\n//   },\r\n\r\n//   showUploadList: true,\r\n//   onChange(info) {\r\n//     if (info.file.status !== 'uploading') {\r\n//       console.log(info.file, info.fileList);\r\n//     }\r\n//     if (info.file.status === 'done') {\r\n//       message.success(`${info.file.name} file uploaded successfully`);\r\n//     } else if (info.file.status === 'error') {\r\n//       message.error(`${info.file.name} file upload failed.`);\r\n//     }\r\n//   },\r\n//   beforeUpload: (file, fileList) => {\r\n\r\n//     var rABS = true;\r\n//     const f = fileList[0];\r\n//     var reader = new FileReader();\r\n//     reader.onload = function (e) {\r\n//       var data = e.target.result;\r\n\r\n//       var workbook = XLSX.read(data, {\r\n//         type: rABS ? 'binary' : 'array'\r\n//       });\r\n//       var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\r\n//       var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, { header: 1 });\r\n\r\n//       let resultArray = [];\r\n//       console.log(jsonArr);\r\n//       console.log(jsonArr.length);\r\n//       console.log(jsonArr[0].length);\r\n//       for (let i = 1; i < jsonArr.length; i++) {\r\n//         var objArray = [];\r\n//         for (let j = 0; j < jsonArr[0].length; j++) {\r\n//           var obj = new Object;\r\n//           obj = { key: jsonArr[0][j], value: jsonArr[i][j] };\r\n//           objArray.push(obj);\r\n//         }\r\n//         resultArray.push(objArray);\r\n\r\n//       }\r\n//       console.log(resultArray);\r\n\r\n//       http.post(\"/prejson\", resultArray);\r\n\r\n//     };\r\n//     if (rABS) reader.readAsBinaryString(f); else reader.readAsArrayBuffer(f);\r\n//     return false;\r\n//   }\r\n\r\n// };\r\n\r\nclass Uppload extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.fileInput = React.createRef();\r\n\r\n  }\r\n  // handleChange(e) {\r\n  //   const files = e.target.files;\r\n  //   if (files && files[0]) this.props.handleFile(files[0]);\r\n  // }\r\n\r\n  handleChange(info) {\r\n    if (info.file.status !== 'uploading') {\r\n      console.log(info.file, info.fileList);\r\n    }\r\n    if (info.file.status === 'done') {\r\n      message.success(`${info.file.name} file uploaded successfully`);\r\n    } else if (info.file.status === 'error') {\r\n      message.error(`${info.file.name} file upload failed.`);\r\n    }\r\n  }\r\n\r\n  beforeUpload = (file, fileList) => {\r\n    var rABS = true;\r\n    const f = fileList[0];\r\n    var reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      var data = e.target.result;\r\n\r\n      var workbook = XLSX.read(data, {\r\n        type: rABS ? 'binary' : 'array'\r\n      });\r\n      var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\r\n      var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, { header: 1 });\r\n\r\n      let resultArray = [];\r\n      console.log(jsonArr);\r\n      console.log(jsonArr.length);\r\n      console.log(jsonArr[0].length);\r\n      for (let i = 1; i < jsonArr.length; i++) {\r\n        var objArray = [];\r\n        for (let j = 0; j < jsonArr[0].length; j++) {\r\n          var obj = new Object;\r\n          obj = { key: jsonArr[0][j], value: jsonArr[i][j] };\r\n          objArray.push(obj);\r\n        }\r\n        resultArray.push(objArray);\r\n\r\n      }\r\n      console.log(resultArray);\r\n\r\n      this.props.onUpload?.(resultArray);\r\n\r\n      // http.post(\"/prejson\", resultArray);\r\n\r\n    };\r\n    if (rABS) reader.readAsBinaryString(f); else reader.readAsArrayBuffer(f);\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n      <Upload\r\n        accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n        name=\"file\"\r\n        headers={{\r\n          authorization: 'authorization-text',\r\n        }}\r\n        onChange={this.onChange}\r\n        beforeUpload={this.beforeUpload}\r\n      >\r\n        <Button icon={<UploadOutlined />}>Click to Upload</Button>\r\n        {/* <input\r\n          type=\"file\"\r\n          hidden\r\n          accept={SheetJSFT}\r\n          ref={this.fileInput}\r\n          onChange={this.handleChange}\r\n\r\n        /> */}\r\n      </Upload>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nconst SheetJSFT = [\r\n  \"xlsx\",\r\n  \"xlsm\",\r\n  \"xls\",\r\n  \"csv\",\r\n\r\n]\r\nexport default Uppload;"]},"metadata":{},"sourceType":"module"}