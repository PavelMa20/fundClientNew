{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"D:\\\\WebReact\\\\FundTest\\\\fundclient\\\\src\\\\components\\\\Uppload\\\\Uppload.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport './Uppload.css';\nimport { Upload, message, Button } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport XLSX from \"xlsx\"; // const props = {\n// accept: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n// name: 'file',\n// headers: {\n//   authorization: 'authorization-text',\n// },\n//   showUploadList: true,\n//   onChange(info) {\n//     if (info.file.status !== 'uploading') {\n//       console.log(info.file, info.fileList);\n//     }\n//     if (info.file.status === 'done') {\n//       message.success(`${info.file.name} file uploaded successfully`);\n//     } else if (info.file.status === 'error') {\n//       message.error(`${info.file.name} file upload failed.`);\n//     }\n//   },\n//   beforeUpload: (file, fileList) => {\n//     var rABS = true;\n//     const f = fileList[0];\n//     var reader = new FileReader();\n//     reader.onload = function (e) {\n//       var data = e.target.result;\n//       var workbook = XLSX.read(data, {\n//         type: rABS ? 'binary' : 'array'\n//       });\n//       var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\n//       var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, { header: 1 });\n//       let resultArray = [];\n//       console.log(jsonArr);\n//       console.log(jsonArr.length);\n//       console.log(jsonArr[0].length);\n//       for (let i = 1; i < jsonArr.length; i++) {\n//         var objArray = [];\n//         for (let j = 0; j < jsonArr[0].length; j++) {\n//           var obj = new Object;\n//           obj = { key: jsonArr[0][j], value: jsonArr[i][j] };\n//           objArray.push(obj);\n//         }\n//         resultArray.push(objArray);\n//       }\n//       console.log(resultArray);\n//       http.post(\"/prejson\", resultArray);\n//     };\n//     if (rABS) reader.readAsBinaryString(f); else reader.readAsArrayBuffer(f);\n//     return false;\n//   }\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UPLOAD_PROPS = {\n  accept: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  name: 'file',\n  headers: {\n    authorization: 'authorization-text'\n  }\n};\n\nclass Uppload extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.beforeUpload = this.beforeUpload.bind(this);\n    this.fileInput = /*#__PURE__*/React.createRef(); // this.state = {\n    //   show: false\n    // };\n    // this.showModal = this.showModal.bind(this);\n    // this.hideModal = this.hideModal.bind(this);   \n  } // showModal = () => {\n  //   console.log(\"kek\");\n  //   console.log(this.state.show);\n  //   this.setState({show: true });\n  //   console.log(this.state.show);\n  // };\n  // hideModal = () => {\n  //   this.setState({ show: false });\n  // };\n  // handleChange(e) {\n  //   const files = e.target.files;\n  //   if (files && files[0]) this.props.handleFile(files[0]);\n  // }\n\n\n  handleChange(info) {\n    if (info.file.status !== 'uploading') {\n      console.log(info.file, info.fileList, \"arsi\");\n      var numFiles = $(\"input:file\")[0].files.length;\n      var numFiles = $(\"Upload:file\")[0].files.length;\n      var numFiles = $(\"Button:file\")[0].files.length;\n    }\n\n    if (info.file.status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully`);\n    } else if (info.file.status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  }\n\n  beforeUpload(file, fileList) {\n    var rABS = true;\n    const f = fileList[0];\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      var _this$props$onUpload, _this$props;\n\n      var data = e.target.result;\n      var workbook = XLSX.read(data, {\n        type: rABS ? 'binary' : 'array'\n      });\n      var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\n      var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, {\n        header: 1\n      });\n      let resultArray = [];\n      console.log(jsonArr);\n      console.log(jsonArr.length);\n      console.log(jsonArr[0].length);\n\n      for (let i = 1; i < jsonArr.length; i++) {\n        var objArray = [];\n\n        for (let j = 0; j < jsonArr[0].length; j++) {\n          var obj = new Object();\n          obj = {\n            key: jsonArr[0][j],\n            value: jsonArr[i][j]\n          };\n          objArray.push(obj);\n        }\n\n        resultArray.push(objArray);\n      }\n\n      (_this$props$onUpload = (_this$props = this.props).onUpload) === null || _this$props$onUpload === void 0 ? void 0 : _this$props$onUpload.call(_this$props, resultArray); // http.post(\"/prejson\", resultArray);\n    }.bind(this);\n\n    if (rABS) reader.readAsBinaryString(f);else reader.readAsArrayBuffer(f);\n    return false;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Upload, { ...UPLOAD_PROPS,\n      onChange: this.handleChange,\n      beforeUpload: this.beforeUpload,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 23\n        }, this),\n        children: \"Click to Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst SheetJSFT = [\"xlsx\", \"xlsm\", \"xls\", \"csv\"];\nexport default Uppload;","map":{"version":3,"sources":["D:/WebReact/FundTest/fundclient/src/components/Uppload/Uppload.js"],"names":["React","Upload","message","Button","UploadOutlined","XLSX","UPLOAD_PROPS","accept","name","headers","authorization","Uppload","PureComponent","constructor","props","handleChange","bind","beforeUpload","fileInput","createRef","info","file","status","console","log","fileList","numFiles","$","files","length","success","error","rABS","f","reader","FileReader","onload","e","data","target","result","workbook","read","type","first_worksheet","Sheets","SheetNames","jsonArr","utils","sheet_to_json","header","resultArray","i","objArray","j","obj","Object","key","value","push","onUpload","readAsBinaryString","readAsArrayBuffer","render","SheetJSFT"],"mappings":"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","sourcesContent":["'use strict';\r\nimport React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './Uppload.css';\r\nimport { Upload, message, Button} from 'antd';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport XLSX from \"xlsx\";\r\n\r\n\r\n\r\n\r\n\r\n// const props = {\r\n  // accept: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n  // name: 'file',\r\n  // headers: {\r\n  //   authorization: 'authorization-text',\r\n  // },\r\n\r\n//   showUploadList: true,\r\n//   onChange(info) {\r\n//     if (info.file.status !== 'uploading') {\r\n//       console.log(info.file, info.fileList);\r\n//     }\r\n//     if (info.file.status === 'done') {\r\n//       message.success(`${info.file.name} file uploaded successfully`);\r\n//     } else if (info.file.status === 'error') {\r\n//       message.error(`${info.file.name} file upload failed.`);\r\n//     }\r\n//   },\r\n//   beforeUpload: (file, fileList) => {\r\n\r\n//     var rABS = true;\r\n//     const f = fileList[0];\r\n//     var reader = new FileReader();\r\n//     reader.onload = function (e) {\r\n//       var data = e.target.result;\r\n\r\n//       var workbook = XLSX.read(data, {\r\n//         type: rABS ? 'binary' : 'array'\r\n//       });\r\n//       var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\r\n//       var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, { header: 1 });\r\n\r\n//       let resultArray = [];\r\n//       console.log(jsonArr);\r\n//       console.log(jsonArr.length);\r\n//       console.log(jsonArr[0].length);\r\n//       for (let i = 1; i < jsonArr.length; i++) {\r\n//         var objArray = [];\r\n//         for (let j = 0; j < jsonArr[0].length; j++) {\r\n//           var obj = new Object;\r\n//           obj = { key: jsonArr[0][j], value: jsonArr[i][j] };\r\n//           objArray.push(obj);\r\n//         }\r\n//         resultArray.push(objArray);\r\n\r\n//       }\r\n//       console.log(resultArray);\r\n\r\n//       http.post(\"/prejson\", resultArray);\r\n\r\n//     };\r\n//     if (rABS) reader.readAsBinaryString(f); else reader.readAsArrayBuffer(f);\r\n//     return false;\r\n//   }\r\n\r\n// };\r\n\r\nconst UPLOAD_PROPS = {\r\n  accept: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n  name: 'file',\r\n  headers: {\r\n    authorization: 'authorization-text',\r\n  },\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass Uppload extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.beforeUpload = this.beforeUpload.bind(this);\r\n    this.fileInput = React.createRef();     \r\n    // this.state = {\r\n    //   show: false\r\n    // };\r\n    // this.showModal = this.showModal.bind(this);\r\n    // this.hideModal = this.hideModal.bind(this);   \r\n  }\r\n  // showModal = () => {\r\n  //   console.log(\"kek\");\r\n  //   console.log(this.state.show);\r\n  //   this.setState({show: true });\r\n  //   console.log(this.state.show);\r\n  // };\r\n\r\n  // hideModal = () => {\r\n  //   this.setState({ show: false });\r\n  // };\r\n  \r\n  // handleChange(e) {\r\n  //   const files = e.target.files;\r\n  //   if (files && files[0]) this.props.handleFile(files[0]);\r\n  // }\r\n\r\n  handleChange(info) {\r\n    if (info.file.status !== 'uploading') {\r\n      console.log(info.file, info.fileList,\"arsi\");\r\n      var numFiles = $(\"input:file\")[0].files.length;\r\n      var numFiles = $(\"Upload:file\")[0].files.length;\r\n      var numFiles = $(\"Button:file\")[0].files.length;\r\n     \r\n     \r\n    }\r\n    if (info.file.status === 'done') {\r\n      message.success(`${info.file.name} file uploaded successfully`);\r\n    } else if (info.file.status === 'error') {\r\n      message.error(`${info.file.name} file upload failed.`);\r\n    }\r\n  }\r\n\r\n  beforeUpload(file, fileList) {\r\n    var rABS = true;\r\n    const f = fileList[0];\r\n    var reader = new FileReader();\r\n    reader.onload = function (e) {\r\n   \r\n      var data = e.target.result;\r\n\r\n      var workbook = XLSX.read(data, {\r\n        type: rABS ? 'binary' : 'array'\r\n      });\r\n      var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\r\n      var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, { header: 1 });\r\n     \r\n\r\n      let resultArray = [];\r\n      console.log(jsonArr);\r\n      console.log(jsonArr.length);\r\n      console.log(jsonArr[0].length);\r\n      for (let i = 1; i < jsonArr.length; i++) {\r\n        var objArray = [];\r\n        for (let j = 0; j < jsonArr[0].length; j++) {\r\n          var obj = new Object;\r\n          obj = { key: jsonArr[0][j], value: jsonArr[i][j] };\r\n          objArray.push(obj);\r\n        }\r\n        resultArray.push(objArray);\r\n\r\n      }\r\n\r\n      this.props.onUpload?.(resultArray);\r\n\r\n      // http.post(\"/prejson\", resultArray);\r\n\r\n    }.bind(this);\r\n    if (rABS) reader.readAsBinaryString(f); else reader.readAsArrayBuffer(f);\r\n    return false;\r\n  }\r\n\r\n \r\n\r\n  render() {\r\n            \r\n    return (\r\n\r\n      <Upload\r\n        {...UPLOAD_PROPS}\r\n        onChange={this.handleChange}\r\n        beforeUpload={this.beforeUpload}\r\n       \r\n      \r\n        \r\n      >\r\n        <Button icon={<UploadOutlined />}>Click to Upload</Button>\r\n     \r\n        {/* <input\r\n          type=\"file\"\r\n          hidden\r\n          accept={SheetJSFT}\r\n          ref={this.fileInput}\r\n          onChange={this.handleChange}\r\n\r\n        /> */}\r\n      </Upload>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nconst SheetJSFT = [\r\n  \"xlsx\",\r\n  \"xlsm\",\r\n  \"xls\",\r\n  \"csv\",\r\n\r\n]\r\nexport default Uppload;"]},"metadata":{},"sourceType":"module"}