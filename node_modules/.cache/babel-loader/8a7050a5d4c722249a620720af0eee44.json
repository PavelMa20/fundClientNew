{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebReact\\\\FundTest\\\\fundclient\\\\src\\\\components\\\\ColumnInput\\\\ColumnInput.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Select, Input } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\n\nconst ColumnInput = ({\n  onName\n}) => {\n  let columnNames = onName;\n  console.log(columnNames);\n\n  function createSelectItems(columnNames) {\n    let items = [];\n\n    for (let i = 0; i <= columnNames.length; i++) {\n      items.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: columnNames[i],\n        children: columnNames[i]\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 25\n      }, this)); //here I will be creating my options dynamically based on\n      //what props are currently passed to the parent component\n    }\n\n    return items;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"Choose document name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), columnNames.map(n => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: n.value,\n          children: n.value\n        }, n, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 16\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ColumnInput;\nexport default ColumnInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColumnInput\");","map":{"version":3,"sources":["D:/WebReact/FundTest/fundclient/src/components/ColumnInput/ColumnInput.js"],"names":["React","Select","Input","Option","ColumnInput","onName","columnNames","console","log","createSelectItems","items","i","length","push","map","n","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;AACA,SAAUC,MAAV,EAAiBC,KAAjB,QAA8B,MAA9B;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAaF,MAAnB;;AACA,MAAMG,WAAW,GAAC,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAC1B,MAAIC,WAAW,GAAGD,MAAlB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ;;AACD,WAASG,iBAAT,CAA2BH,WAA3B,EAAwC;AACnC,QAAII,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,WAAW,CAACM,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AACzCD,MAAAA,KAAK,CAACG,IAAN,eAAW;AAAgB,QAAA,KAAK,EAAEP,WAAW,CAACK,CAAD,CAAlC;AAAA,kBAAwCL,WAAW,CAACK,CAAD;AAAnD,SAAaA,CAAb;AAAA;AAAA;AAAA;AAAA,cAAX,EADyC,CAEzC;AACA;AACJ;;AACD,WAAOD,KAAP;AACH;;AACD,sBACI;AAAA,2BAOF;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEDJ,WAAW,CAACQ,GAAZ,CAAiBC,CAAD,IAAO;AACpB,4BAAO;AAAgB,UAAA,KAAK,EAAEA,CAAC,CAACC,KAAzB;AAAA,oBAAiCD,CAAC,CAACC;AAAnC,WAAaD,CAAb;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFA,CAFC;AAAA;AAAA;AAAA;AAAA;AAAA;AAPE;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CA7BD;;KAAMX,W;AA+BN,eAAeA,WAAf","sourcesContent":["import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport {  Select,Input } from 'antd';\r\n\r\nconst { Option } = Select;\r\nconst ColumnInput=({onName})=>{\r\n    let columnNames = onName;\r\n    console.log(columnNames);\r\n   function createSelectItems(columnNames) {\r\n        let items = [];         \r\n        for (let i = 0; i <= columnNames.length; i++) {             \r\n             items.push(<option key={i} value={columnNames[i]}>{columnNames[i]}</option>);   \r\n             //here I will be creating my options dynamically based on\r\n             //what props are currently passed to the parent component\r\n        }\r\n        return items;\r\n    } \r\n    return(\r\n        <div>\r\n         {/* <Select defaultValue=\"Choose document name\">\r\n             {columnNames.map((name)=> <Option value={name.value}>{name.value}</Option> )} \r\n          \r\n         <Option value=\"Option1-1\">Option1-1</Option>\r\n        <Option value=\"Option1-2\">Option1-2</Option> \r\n      </Select>  */}\r\n      <select >\r\n          <option>Choose document name</option>\r\n    {columnNames.map((n) => {\r\n        return <option key={n} value={n.value}>{n.value}</option>;\r\n    })}\r\n</select>\r\n      </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default ColumnInput;"]},"metadata":{},"sourceType":"module"}