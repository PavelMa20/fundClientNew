{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"D:\\\\WebReact\\\\FundTest\\\\fundclient\\\\src\\\\components\\\\Uppload\\\\Uppload.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport './Uppload.css';\nimport { Upload, message, Button } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport XLSX from \"xlsx\"; //  const props = {\n//       accept: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n//       name: 'file',\n//       headers: {\n//           authorization: 'authorization-text',\n//       },\n//       showUploadList: true,\n//       onChange(info) {\n//         if (info.file.status !== 'uploading') {\n//           console.log(info.file, info.fileList);\n//         }\n//         if (info.file.status === 'done') {\n//           message.success(`${info.file.name} file uploaded successfully`);\n//         } else if (info.file.status === 'error') {\n//           message.error(`${info.file.name} file upload failed.`);\n//         }\n//       },\n//       beforeUpload: (file, fileList) => {\n//         var rABS = true;\n//         const f = fileList[0];\n//         var reader = new FileReader();\n//         reader.onload = function (e) {\n//             var data = e.target.result;\n//             var workbook = XLSX.read(data, {\n//                 type: rABS ? 'binary' : 'array'\n//             });\n//             var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\n//             var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, {header:1});\n//           let resultArray = [];\n//             console.log(jsonArr);\n//             console.log(jsonArr.length);\n//             console.log(jsonArr[0].length);\n//             for(let i=1;i<jsonArr.length;i++){\n//             var  objArray = [];\n//               for(let j=0;j<jsonArr[0].length;j++){\n//                 var obj = new Object;\n//                       obj = {key:jsonArr[0][j] , value:jsonArr[i][j]};\n//                       objArray.push(obj); \n//               }\n//               resultArray.push(objArray);  \n//             }\n//             console.log(resultArray);\n//         };\n//         if (rABS) reader.readAsBinaryString(f); else reader.readAsArrayBuffer(f);\n//         return false;\n//       }\n//   };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Uppload extends React.Component {\n  constructor(props) {\n    super(props);\n    props = {\n      accept: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      name: 'file',\n      headers: {\n        authorization: 'authorization-text'\n      },\n      showUploadList: true,\n\n      onChange(info) {\n        if (info.file.status !== 'uploading') {\n          console.log(info.file, info.fileList);\n        }\n\n        if (info.file.status === 'done') {\n          message.success(`${info.file.name} file uploaded successfully`);\n        } else if (info.file.status === 'error') {\n          message.error(`${info.file.name} file upload failed.`);\n        }\n      },\n\n      beforeUpload: (file, fileList) => {\n        var rABS = true;\n        const f = fileList[0];\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n          var data = e.target.result;\n          var workbook = XLSX.read(data, {\n            type: rABS ? 'binary' : 'array'\n          });\n          var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\n          var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, {\n            header: 1\n          });\n          let resultArray = [];\n          console.log(jsonArr);\n          console.log(jsonArr.length);\n          console.log(jsonArr[0].length);\n\n          for (let i = 1; i < jsonArr.length; i++) {\n            var objArray = [];\n\n            for (let j = 0; j < jsonArr[0].length; j++) {\n              var obj = new Object();\n              obj = {\n                key: jsonArr[0][j],\n                value: jsonArr[i][j]\n              };\n              objArray.push(obj);\n            }\n\n            resultArray.push(objArray);\n          }\n\n          console.log(resultArray);\n        };\n\n        if (rABS) reader.readAsBinaryString(f);else reader.readAsArrayBuffer(f);\n        return false;\n      }\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.fileInput = /*#__PURE__*/React.createRef();\n  }\n\n  handleChange(e) {\n    const files = e.target.files;\n    if (files && files[0]) this.props.handleFile(files[0]);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Upload, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 23\n        }, this),\n        children: \"Click to Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        hidden: true,\n        accept: SheetJSFT,\n        ref: this.fileInput,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nconst SheetJSFT = [\"xlsx\", \"xlsm\", \"xls\", \"csv\"];\nexport default Uppload;","map":{"version":3,"sources":["D:/WebReact/FundTest/fundclient/src/components/Uppload/Uppload.js"],"names":["React","Upload","message","Button","UploadOutlined","XLSX","Uppload","Component","constructor","props","accept","name","headers","authorization","showUploadList","onChange","info","file","status","console","log","fileList","success","error","beforeUpload","rABS","f","reader","FileReader","onload","e","data","target","result","workbook","read","type","first_worksheet","Sheets","SheetNames","jsonArr","utils","sheet_to_json","header","resultArray","length","i","objArray","j","obj","Object","key","value","push","readAsBinaryString","readAsArrayBuffer","handleChange","bind","fileInput","createRef","files","handleFile","render","SheetJSFT"],"mappings":"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","sourcesContent":["'use strict';\r\nimport React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './Uppload.css';\r\nimport { Upload, message, Button } from 'antd';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport XLSX from \"xlsx\";\r\n\r\n\r\n\r\n//  const props = {\r\n//       accept: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n//       name: 'file',\r\n//       headers: {\r\n//           authorization: 'authorization-text',\r\n//       },\r\n      \r\n//       showUploadList: true,\r\n//       onChange(info) {\r\n//         if (info.file.status !== 'uploading') {\r\n//           console.log(info.file, info.fileList);\r\n//         }\r\n//         if (info.file.status === 'done') {\r\n//           message.success(`${info.file.name} file uploaded successfully`);\r\n//         } else if (info.file.status === 'error') {\r\n//           message.error(`${info.file.name} file upload failed.`);\r\n//         }\r\n//       },\r\n//       beforeUpload: (file, fileList) => {\r\n        \r\n//         var rABS = true;\r\n//         const f = fileList[0];\r\n//         var reader = new FileReader();\r\n//         reader.onload = function (e) {\r\n//             var data = e.target.result;\r\n          \r\n//             var workbook = XLSX.read(data, {\r\n//                 type: rABS ? 'binary' : 'array'\r\n//             });\r\n//             var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\r\n//             var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, {header:1});\r\n          \r\n//           let resultArray = [];\r\n//             console.log(jsonArr);\r\n//             console.log(jsonArr.length);\r\n//             console.log(jsonArr[0].length);\r\n//             for(let i=1;i<jsonArr.length;i++){\r\n//             var  objArray = [];\r\n//               for(let j=0;j<jsonArr[0].length;j++){\r\n//                 var obj = new Object;\r\n//                       obj = {key:jsonArr[0][j] , value:jsonArr[i][j]};\r\n//                       objArray.push(obj); \r\n//               }\r\n//               resultArray.push(objArray);  \r\n//             }\r\n//             console.log(resultArray);\r\n\r\n            \r\n        \r\n//         };\r\n//         if (rABS) reader.readAsBinaryString(f); else reader.readAsArrayBuffer(f);\r\n//         return false;\r\n//       }\r\n     \r\n  \r\n\r\n//   };\r\n\r\n  class Uppload extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      props = {\r\n        accept: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n        name: 'file',\r\n        headers: {\r\n            authorization: 'authorization-text',\r\n        },\r\n        \r\n        showUploadList: true,\r\n        onChange(info) {\r\n          if (info.file.status !== 'uploading') {\r\n            console.log(info.file, info.fileList);\r\n          }\r\n          if (info.file.status === 'done') {\r\n            message.success(`${info.file.name} file uploaded successfully`);\r\n          } else if (info.file.status === 'error') {\r\n            message.error(`${info.file.name} file upload failed.`);\r\n          }\r\n        },\r\n        beforeUpload: (file, fileList) => {\r\n          \r\n          var rABS = true;\r\n          const f = fileList[0];\r\n          var reader = new FileReader();\r\n          reader.onload = function (e) {\r\n              var data = e.target.result;\r\n            \r\n              var workbook = XLSX.read(data, {\r\n                  type: rABS ? 'binary' : 'array'\r\n              });\r\n              var first_worksheet = workbook.Sheets[workbook.SheetNames[0]];\r\n              var jsonArr = XLSX.utils.sheet_to_json(first_worksheet, {header:1});\r\n            \r\n            let resultArray = [];\r\n              console.log(jsonArr);\r\n              console.log(jsonArr.length);\r\n              console.log(jsonArr[0].length);\r\n              for(let i=1;i<jsonArr.length;i++){\r\n              var  objArray = [];\r\n                for(let j=0;j<jsonArr[0].length;j++){\r\n                  var obj = new Object;\r\n                        obj = {key:jsonArr[0][j] , value:jsonArr[i][j]};\r\n                        objArray.push(obj); \r\n                }\r\n                resultArray.push(objArray);  \r\n              }\r\n              console.log(resultArray);\r\n  \r\n              \r\n          \r\n          };\r\n          if (rABS) reader.readAsBinaryString(f); else reader.readAsArrayBuffer(f);\r\n          return false;\r\n        }\r\n       \r\n    \r\n  \r\n    };\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.fileInput = React.createRef();\r\n    \r\n    }\r\n    \r\n   \r\n    handleChange(e) {\r\n      const files = e.target.files;\r\n      if (files && files[0]) this.props.handleFile(files[0]);\r\n    }\r\n  render() {\r\n    return (\r\n\r\n        <Upload >\r\n        <Button icon={<UploadOutlined /> }>Click to Upload</Button>\r\n        <input\r\n          type=\"file\"\r\n          hidden\r\n          accept={SheetJSFT}\r\n          ref={this.fileInput}\r\n          onChange={this.handleChange}\r\n         \r\n        />\r\n      </Upload>\r\n    )}\r\n\r\n}\r\n\r\nconst SheetJSFT = [\r\n  \"xlsx\",\r\n  \"xlsm\",\r\n  \"xls\",\r\n  \"csv\",\r\n  \r\n]\r\nexport default Uppload;"]},"metadata":{},"sourceType":"module"}