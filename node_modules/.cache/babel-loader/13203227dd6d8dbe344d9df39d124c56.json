{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebReact\\\\FundTest\\\\fundclient\\\\src\\\\components\\\\NamingTable\\\\NamingTable.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from 'react';\nimport 'antd/dist/antd.css';\nimport './NamingTable.css';\nimport { Table, Input, Button, Popconfirm, Form, Select } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport ColumnInput from '../ColumnInput/ColumnInput';\nimport RenderCell from '../RenderCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\nconst EditableContext = /*#__PURE__*/React.createContext(null);\n\nconst EditableRow = ({\n  index,\n  ...props\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    component: false,\n    children: /*#__PURE__*/_jsxDEV(EditableContext.Provider, {\n      value: form,\n      children: /*#__PURE__*/_jsxDEV(\"tr\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditableRow, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = EditableRow;\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  _s2();\n\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record,\n        ...values\n      });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: true,\n        message: `${title} is required.`\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        ref: inputRef,\n        onPressEnter: save,\n        onBlur: save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: childNode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(EditableCell, \"IMw7TsWhFd8T/FybyizRtPpww8A=\");\n\n_c2 = EditableCell;\n\nclass NamingTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setFirstElement = value => {\n      console.log(value);\n      this.setState({\n        firstElement: value\n      });\n    };\n\n    this.handleDelete = key => {\n      const dataSource = [...this.state.dataSource];\n      this.setState({\n        dataSource: dataSource.filter(item => item.key !== key)\n      });\n    };\n\n    this.handleAdd = () => {\n      const {\n        count,\n        dataSource\n      } = this.state;\n      const newData = {\n        key: count,\n        name: `Edward King ${count}`,\n        age: '32'\n      };\n      this.setState({\n        dataSource: [...dataSource, newData],\n        count: count + 1\n      });\n    };\n\n    this.handleSave = row => {\n      const newData = [...this.state.dataSource];\n      const index = newData.findIndex(item => row.key === item.key);\n      const item = newData[index];\n      newData.splice(index, 1, { ...item,\n        ...row\n      });\n      this.setState({\n        dataSource: newData\n      }); //  console.log(this.props.resultArray);\n    };\n\n    this.columns = [{\n      title: 'Preffix',\n      dataIndex: 'preffix',\n      width: '30%',\n      editable: true\n    }, {\n      title: 'Column Value',\n      dataIndex: 'Columnvalue',\n      render: () => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"site-input-group-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(ColumnInput, {\n          onName: this.props.nameArray,\n          setColumnName: this.props.setColumnName,\n          resultArray: this.props.resultArray,\n          setFirstElement: this.setFirstElement\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this)\n    }, {\n      title: 'Postfix',\n      dataIndex: 'postfix',\n      width: '30%',\n      editable: true\n    }, {\n      title: 'PDF name example',\n      dataIndex: 'PDFnameexample',\n      width: '30%',\n      render: () => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.firstElement, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this)\n    }];\n    this.state = {\n      dataSource: [{// preffix: this.props.preffix,\n        // postfix: this.props.postfix,\n      }],\n      count: 1,\n      firstElement: ''\n    };\n  } //     handlePreffix=(newValue)=>{\n  //             this.props.preffix(newValue);\n  //             return newValue;\n  //     }\n  //     handlePostfix=(newValue)=>{\n  //         this.props.postfix(newValue);\n  //         return newValue;\n  // }\n\n\n  render() {\n    const {\n      dataSource\n    } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return { ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        components: components,\n        rowClassName: () => 'editable-row',\n        bordered: true,\n        dataSource: dataSource,\n        columns: columns,\n        pagination: {\n          defaultPageSize: 10,\n          hideOnSinglePage: true\n        },\n        style: {\n          margin: 0\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default NamingTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableRow\");\n$RefreshReg$(_c2, \"EditableCell\");","map":{"version":3,"sources":["D:/WebReact/FundTest/fundclient/src/components/NamingTable/NamingTable.js"],"names":["React","useContext","useState","useEffect","useRef","Table","Input","Button","Popconfirm","Form","Select","DeleteOutlined","ColumnInput","RenderCell","Option","EditableContext","createContext","EditableRow","index","props","form","useForm","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","save","values","validateFields","errInfo","console","log","childNode","margin","required","message","paddingRight","NamingTable","Component","constructor","setFirstElement","value","setState","firstElement","handleDelete","key","dataSource","state","filter","item","handleAdd","count","newData","name","age","row","findIndex","splice","columns","width","render","nameArray","setColumnName","resultArray","components","body","cell","map","col","onCell","defaultPageSize","hideOnSinglePage"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './NamingTable.css';\r\nimport { Table, Input, Button, Popconfirm, Form, Select } from 'antd';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nimport ColumnInput from '../ColumnInput/ColumnInput';\r\nimport RenderCell from '../RenderCell';\r\nconst { Option } = Select;\r\n\r\nconst EditableContext = React.createContext(null);\r\n\r\nconst EditableRow = ({ index, ...props }) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Form form={form} component={false}>\r\n            <EditableContext.Provider value={form}>\r\n                <tr {...props} />\r\n            </EditableContext.Provider>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst EditableCell = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    ...restProps\r\n}) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const inputRef = useRef(null);\r\n    const form = useContext(EditableContext);\r\n    useEffect(() => {\r\n        if (editing) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [editing]);\r\n\r\n    const toggleEdit = () => {\r\n        setEditing(!editing);\r\n        form.setFieldsValue({\r\n            [dataIndex]: record[dataIndex],\r\n        });\r\n    };\r\n\r\n    const save = async () => {\r\n        try {\r\n            const values = await form.validateFields();\r\n            toggleEdit();\r\n            handleSave({ ...record, ...values });\r\n        } catch (errInfo) {\r\n            console.log('Save failed:', errInfo);\r\n        }\r\n    };\r\n\r\n    let childNode = children;\r\n\r\n    if (editable) {\r\n        childNode = editing ? (\r\n            <Form.Item\r\n                style={{\r\n                    margin: 0,\r\n                }}\r\n                name={dataIndex}\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: `${title} is required.`,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n            </Form.Item>\r\n        ) : (\r\n            <div\r\n                className=\"editable-cell-value-wrap\"\r\n                style={{\r\n                    paddingRight: 24,\r\n                }}\r\n                onClick={toggleEdit}\r\n            >\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\nclass NamingTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.columns = [\r\n            {\r\n                title: 'Preffix',\r\n                dataIndex: 'preffix',\r\n                width: '30%',\r\n                editable: true,\r\n\r\n\r\n            },\r\n            {\r\n                title: 'Column Value',\r\n                dataIndex: 'Columnvalue',\r\n\r\n                render: () =>\r\n                    <div className=\"site-input-group-wrapper\">\r\n                        {/* <Select defaultValue=\"Abc\">\r\n                            <Option value=\"Abc\">Abc</Option>\r\n                            <Option value=\"123\">123</Option>\r\n                            <Option value=\"%\">%</Option>\r\n\r\n                        </Select> */}\r\n\r\n                        <ColumnInput onName={this.props.nameArray} setColumnName={this.props.setColumnName} resultArray={this.props.resultArray} setFirstElement={this.setFirstElement} />\r\n                    </div>\r\n\r\n            },\r\n\r\n            {\r\n                title: 'Postfix',\r\n                dataIndex: 'postfix',\r\n                width: '30%',\r\n                editable: true,\r\n\r\n\r\n\r\n            },\r\n\r\n\r\n            {\r\n                title: 'PDF name example',\r\n                dataIndex: 'PDFnameexample',\r\n                width: '30%',\r\n                render: () =>\r\n                    <div>\r\n                       {this.state.firstElement} {/* <RenderCell preffixAndPostfix={this.state.dataSource} firstElement={this.state} /> */}\r\n                    </div>\r\n            },\r\n        ];\r\n        this.state = {\r\n            dataSource: [\r\n                {\r\n                    // preffix: this.props.preffix,\r\n                    // postfix: this.props.postfix,\r\n\r\n                },\r\n\r\n            ],\r\n            count: 1,\r\n            firstElement: ''\r\n        };\r\n    }\r\n    //     handlePreffix=(newValue)=>{\r\n    //             this.props.preffix(newValue);\r\n    //             return newValue;\r\n    //     }\r\n    //     handlePostfix=(newValue)=>{\r\n    //         this.props.postfix(newValue);\r\n    //         return newValue;\r\n    // }\r\n    setFirstElement = (value) => {\r\n        console.log(value);\r\n        this.setState({ firstElement: value });\r\n    }\r\n\r\n    handleDelete = (key) => {\r\n        const dataSource = [...this.state.dataSource];\r\n        this.setState({\r\n            dataSource: dataSource.filter((item) => item.key !== key),\r\n        });\r\n    };\r\n    handleAdd = () => {\r\n        const { count, dataSource } = this.state;\r\n        const newData = {\r\n            key: count,\r\n            name: `Edward King ${count}`,\r\n            age: '32',\r\n\r\n        };\r\n        this.setState({\r\n            dataSource: [...dataSource, newData],\r\n            count: count + 1,\r\n        });\r\n    };\r\n    handleSave = (row) => {\r\n        const newData = [...this.state.dataSource];\r\n        const index = newData.findIndex((item) => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        this.setState({\r\n            dataSource: newData,\r\n        });\r\n        //  console.log(this.props.resultArray);\r\n\r\n    };\r\n\r\n    render() {\r\n        const { dataSource } = this.state;\r\n        const components = {\r\n            body: {\r\n                row: EditableRow,\r\n                cell: EditableCell,\r\n            },\r\n        };\r\n        const columns = this.columns.map((col) => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n\r\n            return {\r\n                ...col,\r\n                onCell: (record) => ({\r\n                    record,\r\n                    editable: col.editable,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    handleSave: this.handleSave,\r\n                }),\r\n            };\r\n        });\r\n        return (\r\n            <div>\r\n\r\n                <Table\r\n                    components={components}\r\n                    rowClassName={() => 'editable-row'}\r\n                    bordered\r\n                    dataSource={dataSource}\r\n                    columns={columns}\r\n                    pagination={{ defaultPageSize: 10, hideOnSinglePage: true }}\r\n                    style={{\r\n                        margin: 0,\r\n                    }}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default NamingTable;"]},"metadata":{},"sourceType":"module"}