{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebReact\\\\FundTest\\\\fundclient\\\\src\\\\components\\\\UpTable\\\\UpTable.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Table, Input, Popconfirm, Form, Select } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select;\nconst EditableContext = /*#__PURE__*/React.createContext(null);\nvar docType;\n\nconst EditableRow = ({\n  index,\n  ...props\n}) => {\n  _s();\n\n  const [form] = Form.useForm();\n  return /*#__PURE__*/_jsxDEV(Form, {\n    form: form,\n    component: false,\n    children: /*#__PURE__*/_jsxDEV(EditableContext.Provider, {\n      value: form,\n      children: /*#__PURE__*/_jsxDEV(\"tr\", { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditableRow, \"rI7DrJIrFu7YmlGWYiMFTzs8jF0=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = EditableRow;\n\nconst EditableCell = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  _s2();\n\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef(null);\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex]\n    });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({ ...record,\n        ...values\n      });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        margin: 0\n      },\n      name: dataIndex,\n      rules: [{\n        required: true,\n        message: `${title} is required.`\n      }],\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        ref: inputRef,\n        onPressEnter: save,\n        onBlur: save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editable-cell-value-wrap\",\n      style: {\n        paddingRight: 24\n      },\n      onClick: toggleEdit,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: childNode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(EditableCell, \"IMw7TsWhFd8T/FybyizRtPpww8A=\");\n\n_c2 = EditableCell;\n\nfunction handleChange(value) {\n  let val = value;\n  console.log(val);\n  this.docType = checkTableValue(val);\n  console.log(docType); //  return docType;\n}\n\nfunction checkTableValue(value) {\n  if (value === \"CapitalCall\") {\n    return \"numeric\";\n  } else if (value == \"CatchUpCall\") {\n    return \"numeric\";\n  } else if (value == \"CapitalAccount\") {\n    return \"periodic\";\n  } else if (value == \"K1\") {\n    return \"periodic\";\n  }\n}\n\nclass UpTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSave = row => {\n      const newData = [...this.state.dataSource];\n      const index = newData.findIndex(item => row.key === item.key);\n      const item = newData[index];\n      newData.splice(index, 1, { ...item,\n        ...row\n      });\n      this.setState({\n        dataSource: newData\n      });\n    };\n\n    this.columns = [{\n      title: 'Fund',\n      dataIndex: 'name',\n      width: '30%',\n      render: () => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"site-input-group-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          defaultValue: \"Abc\",\n          children: [/*#__PURE__*/_jsxDEV(Option, {\n            value: \"Abc\",\n            children: \"Abc\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Option, {\n            value: \"123\",\n            children: \"123\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Option, {\n            value: \"%\",\n            children: \"%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this)\n    }, {\n      title: 'Document type',\n      dataIndex: 'DocumentType',\n      render: () => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"site-input-group-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          defaultValue: \"CapitalCall\",\n          onChange: handleChange,\n          children: [/*#__PURE__*/_jsxDEV(Option, {\n            value: \"CapitalCall\",\n            children: \"Capital Call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 29\n          }, this), \" //Numeric\", /*#__PURE__*/_jsxDEV(Option, {\n            value: \"CapitalAccount\",\n            children: \"Capital Account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this), \" //Periodic\", /*#__PURE__*/_jsxDEV(Option, {\n            value: \"CatchUpCall\",\n            children: \"Catch-Up Call\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 17\n          }, this), \" //Numeric\", /*#__PURE__*/_jsxDEV(Option, {\n            value: \"K1\",\n            children: \"K-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }, this), \" //Periodic\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this)\n    }, {\n      title: 'Periodic or Numeric Document?',\n      dataIndex: 'PeriodicorNumeric',\n\n      render() {\n        return (\n          /*#__PURE__*/\n          // <div>\n          //     {(() => {\n          //         if (val === \"CapitalCall\") {\n          //             return (\n          //                 <div>{{type}}</div>\n          //             )\n          //         } else if (val ==\"CatchUpCall\") {\n          //             return (\n          //                 <div>Numeric</div>\n          //             )\n          //         } else if (val ==\"CapitalAccount\") {\n          //             return (\n          //                 <div>Periodic</div>\n          //             )\n          //         }else if (val ==\"K1\") {\n          //             return (\n          //                 <div>Periodic</div>\n          //             )\n          //         }\n          //     })()}\n          // </div>\n          _jsxDEV(\"div\", {\n            children: docType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 26\n          }, this)\n        ); // <div className=\"site-input-group-wrapper\">\n        //     <Select defaultValue=\"Periodic\">\n        //         <Option value=\"Periodic\">Periodic</Option>\n        //         <Option value=\"Numeric\">Numeric</Option>\n        //     </Select>\n        // </div>\n      }\n\n    }, {\n      title: 'Document Number',\n      dataIndex: 'DocumentNumber',\n      render: () => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"site-input-group-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          defaultValue: \"1\",\n          children: [/*#__PURE__*/_jsxDEV(Option, {\n            value: \"Periodic\",\n            children: \"Periodic\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Option, {\n            value: \"Numeric\",\n            children: \"Numeric\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }, this)\n    }, {\n      title: 'Name the ',\n      dataIndex: 'DocumentName',\n      editable: true\n    }];\n    this.state = {\n      dataSource: [{}],\n      count: 1\n    };\n  }\n\n  render() {\n    const {\n      dataSource\n    } = this.state;\n    const components = {\n      body: {\n        row: EditableRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return { ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      };\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        components: components,\n        rowClassName: () => 'editable-row',\n        bordered: true,\n        dataSource: dataSource,\n        columns: columns,\n        pagination: {\n          defaultPageSize: 10,\n          hideOnSinglePage: true\n        },\n        style: {\n          margin: 20\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default UpTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableRow\");\n$RefreshReg$(_c2, \"EditableCell\");","map":{"version":3,"sources":["D:/WebReact/FundTest/fundclient/src/components/UpTable/UpTable.js"],"names":["React","useContext","useState","useEffect","useRef","Table","Input","Popconfirm","Form","Select","Option","EditableContext","createContext","docType","EditableRow","index","props","form","useForm","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","current","focus","toggleEdit","setFieldsValue","save","values","validateFields","errInfo","console","log","childNode","margin","required","message","paddingRight","handleChange","value","val","checkTableValue","UpTable","Component","constructor","row","newData","state","dataSource","findIndex","item","key","splice","setState","columns","width","render","count","components","body","cell","map","col","onCell","defaultPageSize","hideOnSinglePage"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from 'react';\r\nimport { Table, Input,  Popconfirm, Form, Select } from 'antd';\r\nconst { Option } = Select;\r\n\r\n\r\nconst EditableContext = React.createContext(null);\r\nvar docType;\r\nconst EditableRow = ({ index, ...props }) => {\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Form form={form} component={false}>\r\n            <EditableContext.Provider value={form}>\r\n                <tr {...props} />\r\n            </EditableContext.Provider>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst EditableCell = ({\r\n    title,\r\n    editable,\r\n    children,\r\n    dataIndex,\r\n    record,\r\n    handleSave,\r\n    ...restProps\r\n}) => {\r\n    const [editing, setEditing] = useState(false);\r\n    const inputRef = useRef(null);\r\n    const form = useContext(EditableContext);\r\n    useEffect(() => {\r\n        if (editing) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [editing]);\r\n\r\n    const toggleEdit = () => {\r\n        setEditing(!editing);\r\n        form.setFieldsValue({\r\n            [dataIndex]: record[dataIndex],\r\n        });\r\n    };\r\n\r\n    const save = async () => {\r\n        try {\r\n            const values = await form.validateFields();\r\n            toggleEdit();\r\n            handleSave({ ...record, ...values });\r\n        } catch (errInfo) {\r\n            console.log('Save failed:', errInfo);\r\n        }\r\n    };\r\n  \r\n\r\n    let childNode = children;\r\n\r\n    if (editable) {\r\n        childNode = editing ? (\r\n            <Form.Item\r\n                style={{\r\n                    margin: 0,\r\n                }}\r\n                name={dataIndex}\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: `${title} is required.`,\r\n                    },\r\n                ]}\r\n            >\r\n                <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n            </Form.Item>\r\n        ) : (\r\n            <div\r\n                className=\"editable-cell-value-wrap\"\r\n                style={{\r\n                    paddingRight: 24,\r\n                }}\r\n                onClick={toggleEdit}\r\n            >\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return <td {...restProps}>{childNode}</td>;\r\n};\r\nfunction handleChange(value) {\r\n    let  val = value;\r\n       console.log(val)\r\n      this.docType = checkTableValue(val);\r\n     console.log(docType);\r\n     \r\n     //  return docType;\r\n     }\r\n     function checkTableValue(value){\r\n      if (value === \"CapitalCall\") {\r\n          return (\"numeric\" )\r\n      } else if (value ==\"CatchUpCall\") {\r\n          return (\"numeric\")\r\n      } else if (value ==\"CapitalAccount\") {\r\n          return (\"periodic\")\r\n      }else if (value ==\"K1\") {\r\n          return (\"periodic\")\r\n      }\r\n     }\r\nclass UpTable extends React.Component {\r\n \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.columns = [\r\n            {\r\n                title: 'Fund',\r\n                dataIndex: 'name',\r\n                width: '30%',\r\n                render: () =>\r\n                    <div className=\"site-input-group-wrapper\">\r\n                        <Select defaultValue=\"Abc\">\r\n                            <Option value=\"Abc\">Abc</Option>\r\n                            <Option value=\"123\">123</Option>\r\n                            <Option value=\"%\">%</Option>\r\n\r\n                        </Select>\r\n                    </div>\r\n            },\r\n            {\r\n                title: 'Document type',\r\n                dataIndex: 'DocumentType',\r\n                render: () =>\r\n                    <div className=\"site-input-group-wrapper\">\r\n                        <Select defaultValue=\"CapitalCall\" onChange={handleChange}>\r\n                            <Option value=\"CapitalCall\">Capital Call</Option> //Numeric\r\n                <Option value=\"CapitalAccount\">Capital Account</Option> //Periodic\r\n                <Option value=\"CatchUpCall\">Catch-Up Call</Option> //Numeric \r\n                <Option value=\"K1\">K-1</Option> //Periodic\r\n\r\n            </Select>\r\n                    </div>\r\n            },\r\n            {\r\n                title: 'Periodic or Numeric Document?',\r\n                dataIndex: 'PeriodicorNumeric',\r\n                render() {\r\n                    return (\r\n                        // <div>\r\n                        //     {(() => {\r\n                        //         if (val === \"CapitalCall\") {\r\n                        //             return (\r\n                        //                 <div>{{type}}</div>\r\n                        //             )\r\n                        //         } else if (val ==\"CatchUpCall\") {\r\n                        //             return (\r\n                        //                 <div>Numeric</div>\r\n                        //             )\r\n                        //         } else if (val ==\"CapitalAccount\") {\r\n                        //             return (\r\n                        //                 <div>Periodic</div>\r\n                        //             )\r\n                        //         }else if (val ==\"K1\") {\r\n                        //             return (\r\n                        //                 <div>Periodic</div>\r\n                        //             )\r\n                        //         }\r\n                        //     })()}\r\n                        // </div>\r\n                         <div>{docType}</div>\r\n                    )\r\n\r\n                    // <div className=\"site-input-group-wrapper\">\r\n\r\n\r\n                    //     <Select defaultValue=\"Periodic\">\r\n                    //         <Option value=\"Periodic\">Periodic</Option>\r\n                    //         <Option value=\"Numeric\">Numeric</Option>\r\n\r\n                    //     </Select>\r\n                    // </div>\r\n                }\r\n            },\r\n            {\r\n                title: 'Document Number',\r\n                dataIndex: 'DocumentNumber',\r\n                render: () =>\r\n                    <div className=\"site-input-group-wrapper\">\r\n                        <Select defaultValue=\"1\">\r\n                            <Option value=\"Periodic\">Periodic</Option>\r\n                            <Option value=\"Numeric\">Numeric</Option>\r\n\r\n                        </Select>\r\n                    </div>\r\n            },\r\n            {\r\n                title: 'Name the ',\r\n                dataIndex: 'DocumentName',\r\n                editable: true,\r\n            },\r\n\r\n        ];\r\n        this.state = {\r\n            dataSource: [\r\n                {\r\n\r\n                },\r\n\r\n            ],\r\n            count: 1,\r\n        };\r\n    }\r\n             \r\n\r\n    handleSave = (row) => {\r\n        const newData = [...this.state.dataSource];\r\n        const index = newData.findIndex((item) => row.key === item.key);\r\n        const item = newData[index];\r\n        newData.splice(index, 1, { ...item, ...row });\r\n        this.setState({\r\n            dataSource: newData,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { dataSource } = this.state;\r\n        const components = {\r\n            body: {\r\n                row: EditableRow,\r\n                cell: EditableCell,\r\n            },\r\n        };\r\n        const columns = this.columns.map((col) => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n\r\n            return {\r\n                ...col,\r\n                onCell: (record) => ({\r\n                    record,\r\n                    editable: col.editable,\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    handleSave: this.handleSave,\r\n                }),\r\n            };\r\n        });\r\n        return (\r\n            <div>\r\n                <Table\r\n                    components={components}\r\n                    rowClassName={() => 'editable-row'}\r\n                    bordered\r\n                    dataSource={dataSource}\r\n                    columns={columns}\r\n                    pagination={{ defaultPageSize: 10, hideOnSinglePage: true }}\r\n                    style={{\r\n                        margin: 20,\r\n                    }}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default UpTable;"]},"metadata":{},"sourceType":"module"}